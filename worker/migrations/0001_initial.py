# Generated by Django 3.2.4 on 2021-07-26 06:50

import django.contrib.postgres.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('question', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('worker_id', models.CharField(max_length=200, unique=True)),
                ('attention_all_attempted', models.BooleanField(default=False)),
                ('attention_passed', models.BooleanField(default=False)),
                ('svo_selected_indices', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, default=-1), default=list, size=None)),
                ('negative_reciprocity', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, default=-1), default=list, size=None)),
                ('sex', models.CharField(blank=True, max_length=10)),
                ('age', models.IntegerField(default=1)),
                ('employment_status', models.CharField(blank=True, max_length=100)),
                ('highest_degree', models.CharField(blank=True, max_length=100)),
                ('survey_submitted', models.BooleanField(default=False)),
                ('comprehension_all_attempted', models.BooleanField(default=False)),
                ('comprehension_failed_times', models.IntegerField(default=0)),
                ('comprehension_passed', models.BooleanField(default=False)),
                ('type_work', models.IntegerField(default=-1)),
                ('comprehension_belief_all_attempted', models.BooleanField(default=False)),
                ('comprehension_belief_failed_times', models.IntegerField(default=0)),
                ('comprehension_belief_passed', models.BooleanField(default=False)),
                ('dssProposerAllocation', models.IntegerField(default=-1)),
                ('belief_elicitation', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, default=-1), default=list, size=None), default=list, size=None)),
                ('belief_elicitation_attempted', models.BooleanField(default=False)),
                ('approach_decision', models.IntegerField(default=-1)),
                ('minimum_offer', models.IntegerField(default=-1)),
                ('decision_and_minoffer_submitted', models.BooleanField(default=False)),
                ('reason_approach_postexp', models.CharField(max_length=512)),
                ('rethink_approach_postexp', models.IntegerField(default=-1)),
                ('unfair_postexp', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, default=-1), default=list, size=None)),
                ('dss_postexp', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, default=-1), default=list, size=None)),
                ('autonomousagent_postexp', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, default=-1), default=list, size=None)),
                ('attention_postexp', models.BooleanField(default=False)),
                ('personality_postexp', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, default=-1), default=list, size=None)),
                ('most_responders_bargain_with_postexp', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, default=-1), default=list, size=None)),
                ('postexperimental_submitted', models.BooleanField(default=False)),
                ('unique_code', models.CharField(blank=True, editable=False, max_length=300)),
                ('unique_code_generated', models.BooleanField(default=False)),
                ('attention_responses', models.ManyToManyField(blank=True, to='question.AttentionChoice')),
                ('comprehension_belief_responses', models.ManyToManyField(blank=True, to='question.ComprehensionBeliefChoice')),
                ('comprehension_responses', models.ManyToManyField(blank=True, to='question.ComprehensionChoice')),
            ],
        ),
    ]
